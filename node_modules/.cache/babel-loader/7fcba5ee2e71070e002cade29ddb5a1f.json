{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from 'vuex';\nimport throttle from 'lodash/throttle';\nexport default {\n  name: 'TypeNav',\n  data() {\n    return {\n      //存储用户鼠标移上哪一个一级分类\n      currentIndex: -1,\n      show: true\n    };\n  },\n  //组件挂载完毕：可以向服务器发请求\n  mounted() {\n    //通知Vuex发请求，获取数据，存储于仓库当中\n    this.$store.dispatch('categoryList'); //第一个参数是路径,第二个参数是传值\n    //如果不是Home路由组件，将typeNav进行隐藏\n    if (this.$route.path != '/home') {\n      this.show = false;\n    }\n  },\n  computed: {\n    ...mapState({\n      //右侧需要的是一个函数，当使用这个计算属性的时候，右侧函数会立即执行一次\n      //注入一个参数state，其实即为大仓库中的数据\n      categoryList: state => state.home.categoryList\n    })\n  },\n  methods: {\n    // 鼠标离开修改响应式数据currentIndex属性 并且让商品分类列表进行隐藏\n    leaveIndex() {\n      // 离开后把当前的index变成-1\n      this.currentIndex = -1;\n      //让商品分类列表进行隐藏判断 如果是search路由组件的时候才会执行\n      if (this.$route.path != '/home') {\n        this.show = false;\n      }\n    },\n    // 鼠标进入修改响应式数据currentIndex属性\n    changeIndex: throttle(function (index) {\n      // console.log(index);\n      // index：鼠标移上某一个一级分类的元素的索引值\n      this.currentIndex = index;\n      // console.log(\"工作了\", index);\n    }, 50),\n    //最好的解决方案：编程式导航+事件委派\n    goSearch(e) {\n      // 存在一些问题：事件委派，是把全部的子节点【h3、dt、d1、em】的事件委派给父亲节点点击a标签的时候，才会进行路由跳转【怎么能确定点击的一定是a标签】I\n      //存在另外一个问题：即使你能确定点击的是a标签，如何区分是一级、二级、三级分类的标签。\n      //第一个问题：把子节点当中a标签，我加上自定义属性data-categoryName，其余的子节点是没有的\n      let element = e.target;\n      //节点有一个属性dataset属性，可以获取节点的自定义属性与属性值 解构赋值\n      let {\n        categoryname,\n        categoryid1,\n        categoryid2,\n        categoryid3\n      } = element.dataset;\n      //如果标签身上拥有categoryname一定是a标签\n      if (categoryname) {\n        //一级分类、二级分类、三级分类的a标签\n        // 整理路由参数\n        let location = {\n          name: 'soso'\n        };\n        let query = {\n          categoryName: categoryname\n        };\n        if (categoryid1) {\n          // 整理id1\n          query.categoryId1 = categoryid1;\n        } else if (categoryid2) {\n          // 整理id2\n          query.categoryId2 = categoryid2;\n        } else {\n          // 整理id3\n          query.categoryId3 = categoryid3;\n        }\n        //判断：如果路由跳转的时候，带有params参数，捎带脚传递过去\n        if (this.$route.params) {\n          location.params = this.$route.params;\n          // 合并路径和参数\n          location.query = query;\n          // 路由调转\n          this.$router.push(location);\n        }\n      }\n    },\n    // 当鼠标移入的时候，让商品分类列表进行展示\n    enterShow() {\n      this.show = true;\n    }\n  }\n};","map":{"version":3,"mappings":";AA6EA;AACA;AACA;EACAA;EACAC;IACA;MACA;MACAC;MACAC;IACA;EACA;EACA;EACAC;IACA;IACA;IACA;IACA;MACA;IACA;EACA;EACAC;IACA;MACA;MACA;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IAEA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;QAAAC;QAAAC;QAAAC;QAAAC;MAAA,IACAC;MACA;MACA;QACA;QACA;QACA;UAAAf;QAAA;QACA;UAAAgB;QAAA;QACA;UACA;UACAC;QACA;UACA;UACAA;QACA;UACA;UACAA;QACA;QACA;QACA;UACAC;UACA;UACAA;UACA;UACA;QACA;MACA;IACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","data","currentIndex","show","mounted","computed","categoryList","methods","leaveIndex","changeIndex","goSearch","categoryname","categoryid1","categoryid2","categoryid3","element","categoryName","query","location","enterShow"],"sourceRoot":"src/components/TypeNav","sources":["index.vue"],"sourcesContent":["<template>\n  <!-- 商品分类导航 -->\n  <div class=\"type-nav\">\n    <div class=\"container\">\n      <div @mouseleave=\"leaveIndex\" @mouseenter=\"enterShow\">\n        <h2 class=\"all\">全部商品分类</h2>\n        <transition name=\"sort\">\n          <div class=\"sort\" v-show=\"show\">\n            <!-- 一级菜单 -->\n            <div class=\"all-sort-list2\" @click=\"goSearch\">\n              <div\n                class=\"item bo\"\n                v-for=\"(c1, index) in categoryList\"\n                v-bind:key=\"c1.categoryId\"\n                :class=\"{ cur: currentIndex == index }\"\n              >\n                <h3 @mouseenter=\"changeIndex(index)\">\n                  <a\n                    :data-categoryName=\"c1.categoryName\"\n                    :data-categoryId1=\"c1.categoryId\"\n                    >{{ c1.categoryName }}</a\n                  >\n                </h3>\n                <!-- 二三级菜单 -->\n                <div\n                  class=\"item-list clearfix\"\n                  :style=\"{ display: currentIndex == index ? 'block' : 'none' }\"\n                >\n                  <div\n                    class=\"subitem\"\n                    v-for=\"c2 in c1.categoryChild\"\n                    v-bind:key=\"c2.categoryId\"\n                  >\n                    <dl class=\"fore\">\n                      <dt>\n                        <a\n                          :data-categoryName=\"c2.categoryName\"\n                          :data-categoryId2=\"c2.categoryId\"\n                          >{{ c2.categoryName }}</a\n                        >\n                      </dt>\n                      <dd>\n                        <em\n                          v-for=\"c3 in c2.categoryChild\"\n                          v-bind:key=\"c3.categoryId\"\n                        >\n                          <a\n                            :data-categoryName=\"c3.categoryName\"\n                            :data-categoryId3=\"c3.categoryId\"\n                            >{{ c3.categoryName }}</a\n                          >\n                        </em>\n                      </dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </transition>\n      </div>\n\n      <nav class=\"nav\">\n        <a href=\"###\">服装城</a>\n        <a href=\"###\">美妆馆</a>\n        <a href=\"###\">尚品汇超市</a>\n        <a href=\"###\">全球购</a>\n        <a href=\"###\">闪购</a>\n        <a href=\"###\">团购</a>\n        <a href=\"###\">有趣</a>\n        <a href=\"###\">秒杀</a>\n      </nav>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport throttle from 'lodash/throttle'\nexport default {\n  name: 'TypeNav',\n  data() {\n    return {\n      //存储用户鼠标移上哪一个一级分类\n      currentIndex: -1,\n      show: true,\n    }\n  },\n  //组件挂载完毕：可以向服务器发请求\n  mounted() {\n    //通知Vuex发请求，获取数据，存储于仓库当中\n    this.$store.dispatch('categoryList') //第一个参数是路径,第二个参数是传值\n    //如果不是Home路由组件，将typeNav进行隐藏\n    if (this.$route.path != '/home') {\n      this.show = false\n    }\n  },\n  computed: {\n    ...mapState({\n      //右侧需要的是一个函数，当使用这个计算属性的时候，右侧函数会立即执行一次\n      //注入一个参数state，其实即为大仓库中的数据\n      categoryList: (state) => state.home.categoryList,\n    }),\n  },\n  methods: {\n    // 鼠标离开修改响应式数据currentIndex属性 并且让商品分类列表进行隐藏\n    leaveIndex() {\n      // 离开后把当前的index变成-1\n      this.currentIndex = -1\n      //让商品分类列表进行隐藏判断 如果是search路由组件的时候才会执行\n      if (this.$route.path != '/home') {\n        this.show = false\n      }\n    },\n    // 鼠标进入修改响应式数据currentIndex属性\n    changeIndex: throttle(function (index) {\n      // console.log(index);\n      // index：鼠标移上某一个一级分类的元素的索引值\n      this.currentIndex = index\n      // console.log(\"工作了\", index);\n    }, 50),\n\n    //最好的解决方案：编程式导航+事件委派\n    goSearch(e) {\n      // 存在一些问题：事件委派，是把全部的子节点【h3、dt、d1、em】的事件委派给父亲节点点击a标签的时候，才会进行路由跳转【怎么能确定点击的一定是a标签】I\n      //存在另外一个问题：即使你能确定点击的是a标签，如何区分是一级、二级、三级分类的标签。\n      //第一个问题：把子节点当中a标签，我加上自定义属性data-categoryName，其余的子节点是没有的\n      let element = e.target\n      //节点有一个属性dataset属性，可以获取节点的自定义属性与属性值 解构赋值\n      let { categoryname, categoryid1, categoryid2, categoryid3 } =\n        element.dataset\n      //如果标签身上拥有categoryname一定是a标签\n      if (categoryname) {\n        //一级分类、二级分类、三级分类的a标签\n        // 整理路由参数\n        let location = { name: 'soso' }\n        let query = { categoryName: categoryname }\n        if (categoryid1) {\n          // 整理id1\n          query.categoryId1 = categoryid1\n        } else if (categoryid2) {\n          // 整理id2\n          query.categoryId2 = categoryid2\n        } else {\n          // 整理id3\n          query.categoryId3 = categoryid3\n        }\n        //判断：如果路由跳转的时候，带有params参数，捎带脚传递过去\n        if (this.$route.params) {\n          location.params = this.$route.params\n          // 合并路径和参数\n          location.query = query\n          // 路由调转\n          this.$router.push(location)\n        }\n      }\n    },\n    // 当鼠标移入的时候，让商品分类列表进行展示\n    enterShow() {\n      this.show = true\n    },\n  },\n}\n</script>\n\n<style lang=\"less\" scoped>\n.type-nav {\n  border-bottom: 2px solid #e1251b;\n\n  .container {\n    width: 1200px;\n    margin: 0 auto;\n    display: flex;\n    position: relative;\n\n    .all {\n      width: 210px;\n      height: 45px;\n      background-color: #e1251b;\n      line-height: 45px;\n      text-align: center;\n      color: #fff;\n      font-size: 14px;\n      font-weight: bold;\n    }\n\n    .nav {\n      a {\n        height: 45px;\n        margin: 0 22px;\n        line-height: 45px;\n        font-size: 16px;\n        color: #333;\n      }\n    }\n\n    .sort {\n      position: absolute;\n      left: 0;\n      top: 45px;\n      width: 210px;\n      height: 461px;\n      position: absolute;\n      background: #fafafa;\n      z-index: 999;\n\n      .all-sort-list2 {\n        .item {\n          h3 {\n            line-height: 30px;\n            font-size: 14px;\n            font-weight: 400;\n            overflow: hidden;\n            padding: 0 20px;\n            margin: 0;\n\n            a {\n              color: #333;\n            }\n          }\n\n          .item-list {\n            display: none;\n            position: absolute;\n            width: 734px;\n            min-height: 460px;\n            background: #f7f7f7;\n            left: 210px;\n            border: 1px solid #ddd;\n            top: 0;\n            z-index: 9999 !important;\n\n            .subitem {\n              float: left;\n              width: 650px;\n              padding: 0 4px 0 8px;\n\n              dl {\n                border-top: 1px solid #eee;\n                padding: 6px 0;\n                overflow: hidden;\n                zoom: 1;\n\n                &.fore {\n                  border-top: 0;\n                }\n\n                dt {\n                  float: left;\n                  width: 54px;\n                  line-height: 22px;\n                  text-align: right;\n                  padding: 3px 6px 0 0;\n                  font-weight: 700;\n                }\n\n                dd {\n                  float: left;\n                  width: 415px;\n                  padding: 3px 0 0;\n                  overflow: hidden;\n\n                  em {\n                    float: left;\n                    height: 14px;\n                    line-height: 14px;\n                    padding: 0 8px;\n                    margin-top: 5px;\n                    border-left: 1px solid #ccc;\n                  }\n                }\n              }\n            }\n          }\n        }\n        .cur {\n          background-color: skyblue;\n        }\n      }\n    }\n\n    //过渡动画的样式\n    // 过渡动画开始状态（进入）\n    .sort-enter {\n      height: 0px;\n    }\n    //过渡动画结束状态（进入）\n    .sort-enter-to {\n      height: 481px;\n    }\n    //定义动画时间、速率\n    .sort-enter-active {\n      transition: all 0.5s linear;\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}